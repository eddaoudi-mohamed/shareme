import { Fragment, useState } from "react";
import "./App.css";

interface Iinput {
  id: string;
  type: string;
  name: keyof Iporduct;
  label: string;
}
interface Iporduct {
  title: string;
  price: number;
  quantite: number;
}
interface ItableProducts extends Iporduct {
  totale: number;
}
function App() {
  const defaultValueProduct: Iporduct = {
    title: "",
    price: 0,
    quantite: 0,
  };
  const [product, setProduct] = useState<Iporduct>(defaultValueProduct);
  const [error, setError] = useState<string>("");

  const [products, setProducts] = useState<ItableProducts[]>([]);
  const inputData: Iinput[] = [
    {
      id: "title",
      type: "text",
      name: "title",
      label: "Enter Title product",
    },
    {
      id: "price",
      type: "number",
      name: "price",
      label: "Enter price product",
    },
    {
      id: "quantite",
      type: "number",
      name: "quantite",
      label: "Enter Quantite products",
    },
  ];

  const handlerChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setProduct({
      ...product,
      [name]: value,
    });
  };

  const handlerSubmitProduct = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const HnadlerError = Object.values(product).every(
      (item) => item != "" || item != 0
    );

    if (!HnadlerError) {
      setError("All The Feild Required");
      return false;
    }
    setError("");

    setProducts([
      ...products,
      { ...product, totale: product.price * product.quantite },
    ]);

    return setProduct(defaultValueProduct);
  };

  const RenderFormAddProduct = inputData.map((item) => (
    <Fragment key={item.id}>
      <label htmlFor={item.id}> {item.label} </label>
      <input
        type={item.type}
        name={item.name}
        id={item.id}
        value={product[item.name]}
        onChange={handlerChangeInput}
        className="p-2 rounded-md outline-none bg-slate-900 focus:border focus:border-blue-500 "
      />
    </Fragment>
  ));

  return (
    <>
      <div className="flex flex-col w-full justify-center mt-10 ">
        {/* form add porduct  */}
        <form
          action=""
          onSubmit={handlerSubmitProduct}
          className="flex w-1/3 mx-auto flex-col gap-2 p-2"
        >
          {RenderFormAddProduct}

          {error && (
            <p className=" text-red-500 text-base font-bold">{error}</p>
          )}
          <button type="submit" className="w-full p-2 bg-blue-500 text-lime-50">
            Add Product
          </button>
        </form>

        <div className="container mx-auto">
          <h1 className="text-2xl font-bold mb-4">Your Table</h1>

          {/*  Table products  */}
          <table className="min-w-full  border border-gray-300">
            <thead>
              <tr>
                <th className="py-2 px-4 border-b">Title</th>
                <th className="py-2 px-4 border-b">Price</th>
                <th className="py-2 px-4 border-b">Quantity</th>
                <th className="py-2 px-4 border-b">Total</th>
              </tr>
            </thead>
            <tbody>
              {products.map((item) => (
                <Fragment key={item.price}>
                  <tr>
                    <td className="py-2 px-4 text-center border-b">
                      {" "}
                      {item.title}{" "}
                    </td>
                    <td className="py-2 px-4 text-center border-b">
                      {item.price}
                    </td>
                    <td className="py-2 px-4 text-center border-b">
                      {" "}
                      {item.quantite}{" "}
                    </td>
                    <td className="py-2 px-4 text-center border-b">
                      {item.totale}
                    </td>
                  </tr>
                </Fragment>
              ))}

              {/*  Add more rows as needed */}
            </tbody>
          </table>

          {/*  Subtotal  */}
          <div className="mt-4">
            <p className="text-xl font-semibold">
              Subtotal : {""}
              {products.reduce((preve, current) => preve + current.totale, 0)}
            </p>
          </div>
        </div>
      </div>
    </>
  );
}

export default App;
